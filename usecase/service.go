package usecase

import (
	"bytes"
	"fmt"
	"go/format"
	"mk-oapigen-go/entity"
)

type ServiceGenerator struct {
	Package       string
	SchemaPackage string
}

func (g ServiceGenerator) CreateConstructor(route entity.Route) (str string) {
	str = fmt.Sprintf(
		""+
			"func New%sServiceRouter(s %s%sService) %sServiceRouter { \n"+
			" return %sServiceRouter{service : s} \n"+
			"} \n",
		route.Name,
		g.SchemaPackage,
		route.Name,
		route.Name,
		route.Name,
	)
	return
}

func (g ServiceGenerator) CreateHeader() (str string) {
	return fmt.Sprintf("// Package %s \n"+
		"//this file is generated by swag2go. Implement all methods\n"+
		"//    authorized : miyagawa.ryohei\n"+
		"package %s\n"+
		"\n"+
		"import ( \n"+
		"\"encoding/json\"\n"+
		"\n"+
		"\"github.com/gin-gonic/gin\"\n"+
		")\n",
		g.Package,
		g.Package,
	)
}

func (g ServiceGenerator) CreateStruct(route entity.Route) (str string) {
	str = fmt.Sprintf(""+
		"//%sService\n"+
		"// %s Handler\n"+
		"type %sService struct { \n"+
		"//TODO edit here\n"+
		"} \n",
		route.Name,
		route.Path,
		route.Name,
	)
	return
}

func (g ServiceGenerator) CreateProvider(route entity.Route) (str string) {
	str = fmt.Sprintf(""+
		"func Get%sServiceProvider( \n "+
		"//TODO edit here \n"+
		") %s%sServiceProvider { \n"+
		" return func() (%s%sService, error) { \n"+
		"    //TODO edit here\n"+
		"    return &%sService{ \n"+
		"    //TODO edit here\n"+
		"    }, nil\n"+
		"  }\n"+
		"} \n",
		route.Name,
		g.SchemaPackage,
		route.Name,
		g.SchemaPackage,
		route.Name,
		route.Name,
	)
	return
}

func (g ServiceGenerator) CreateMethod(route entity.Route) (str string) {
	for _, method := range route.Methods {
		arg := fmt.Sprintf(
			"req %s%s",
			g.SchemaPackage,
			method.Request.Name,
		)
		if method.Request.Type == "" {
			arg = ""
		}
		str = str + fmt.Sprintf(""+
			"func (s *%sService)  %s(%s) (*%s%s, error) { \n"+
			"return nil, fmt.Errorf(\"not implemented\") \n"+
			"}\n",
			route.Name,
			method.Name,
			arg,
			g.SchemaPackage,
			method.Response.Name,
		)
	}
	return
}

func (g ServiceGenerator) CreateService(routes []entity.Route) (str string) {
	str = g.CreateHeader()
	for _, route := range routes {
		str = str + g.CreateStruct(route)
		str = str + g.CreateMethod(route)
		str = str + "\n"
	}
	for _, route := range routes {
		str = str + g.CreateProvider(route)
		str = str + "\n"
	}
	return
}

func (g ServiceGenerator) PrintService(routes []entity.Route) {
	str := g.CreateService(routes)
	written, err := format.Source(bytes.NewBufferString(str).Bytes())
	if err != nil {
		panic(err)
	}
	fmt.Println(string(written))
	return

}

func NewServiceGenerator(p string, s string) ServiceGenerator {
	if s != "" {
		s = s + "."
	}
	return ServiceGenerator{
		Package:       p,
		SchemaPackage: s,
	}
}
